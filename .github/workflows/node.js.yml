name: Grok Interaction Workflow

on:
  schedule:
    - cron: '0 */1 * * *'  # Run every 1 hour
  workflow_dispatch:
    inputs:
      question:
        description: 'Question to ask Grok'
        required: true
        default: 'What is the latest news in AI?'

jobs:
  ask-grok:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
        
      - name: Install dependencies
        run: |
          echo "Initializing npm project..."
          npm init -y
          echo "Installing dependencies..."
          npm install puppeteer puppeteer-core puppeteer-extra puppeteer-extra-plugin-stealth fs debug

      - name: System information
        run: |
          echo "Node version: $(node -v)"
          echo "NPM version: $(npm -v)"
          echo "System info: $(uname -a)"
          echo "Available memory: $(free -h)"
          echo "Available disk space: $(df -h)"
          echo "Network connection: $(curl -s https://www.google.com > /dev/null && echo 'Connected' || echo 'Disconnected')"

      - name: Create script directory and screenshots directory
        run: |
          mkdir -p scripts
          mkdir -p screenshots

      - name: Create Puppeteer script
        run: |
          echo "Generating Puppeteer script..."
          cat > scripts/grok-interaction.js << 'EOL'
          const puppeteer = require('puppeteer-extra');
          const StealthPlugin = require('puppeteer-extra-plugin-stealth');
          const fs = require('fs');

          puppeteer.use(StealthPlugin());

          async function interactWithGrok(question) {
              console.log('Starting Grok interaction process...');

              const browser = await puppeteer.launch({
                  headless: "new",
                  executablePath: require('puppeteer').executablePath(),
                  args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage', '--disable-gpu', '--window-size=1280,800']
              });

              const page = await browser.newPage();
              await page.setViewport({ width: 1280, height: 800 });

              const screenshotsDir = './screenshots';
              if (!fs.existsSync(screenshotsDir)) fs.mkdirSync(screenshotsDir, { recursive: true });

              console.log('Navigating to Grok chat interface...');
              try {
                  await page.goto('https://grok.com/chat', { waitUntil: 'domcontentloaded', timeout: 90000 });
                  await new Promise(resolve => setTimeout(resolve, 5000));
                  console.log('Successfully loaded Grok chat');
              } catch (navError) {
                  console.error('Navigation error:', navError.message);
                  console.log('Capturing page content for debugging...');
                  fs.writeFileSync('./screenshots/failure_page_content.html', await page.content());
                  throw new Error('Failed to navigate to https://grok.com/chat');
              }

              await page.screenshot({ path: `${screenshotsDir}/after_navigation.png` });

              console.log('Locating input field...');
              const inputSelector = 'textarea';
              await page.waitForSelector(inputSelector, { visible: true, timeout: 30000 });
              await page.type(inputSelector, question, { delay: 50 });
              await page.screenshot({ path: `${screenshotsDir}/after_typing.png` });

              console.log('Locating submit button...');
              const submitSelector = 'button[type="submit"]';
              await page.waitForSelector(submitSelector, { visible: true, timeout: 10000 });
              await page.click(submitSelector);
              await page.screenshot({ path: `${screenshotsDir}/after_submit.png` });

              console.log('Waiting for response...');

              let responseText = '';
              try {
                  // ✅ 1. Wait for the loading spinner to disappear
                  await page.waitForFunction(() => {
                      const loader = document.querySelector('div[aria-busy="true"], .loading-spinner');
                      return !loader;
                  }, { timeout: 90000 });

                  // ✅ 2. Wait for the full response to load completely
                  let previousText = '';
                  let elapsed = 0;
                  while (elapsed < 240000) { // Wait up to 4 minutes
                      const partialResponse = await page.evaluate(() => {
                          return Array.from(document.querySelectorAll('.message-bubble:not(.system-message)'))
                              .map(el => el.innerText.trim())
                              .filter(text => text.length > 0)
                              .join('\n\n');
                      });

                      if (partialResponse && partialResponse !== previousText) {
                          console.log('Partial Response:', partialResponse);
                          previousText = partialResponse;
                      } else if (elapsed > 60000) { // Ensure text remains stable for at least 1 minute before finalizing
                          responseText = partialResponse;
                          break;
                      }

                      await new Promise(resolve => setTimeout(resolve, 5000)); // Wait 5 seconds before checking again
                      elapsed += 5000;
                  }

                  if (!responseText) throw new Error('No valid response received');

                  console.log('Final GROK_RESPONSE:', responseText);
                  fs.writeFileSync('./grok_response.txt', responseText);
              } catch (error) {
                  console.error('Response error:', error.message);
                  console.log('Capturing full page content for debugging...');
                  fs.writeFileSync('./screenshots/failure_page_content_after_wait.html', await page.content());
                  throw new Error('Failed to retrieve response');
              }

              await page.screenshot({ path: `${screenshotsDir}/final_state.png` });
              await browser.close();
          }

          async function run() {
              const question = process.argv[2] || 'What is the meaning of life?';
              await interactWithGrok(question);
              process.exit(0);
          }

          run().catch(error => {
              console.error('Script failed:', error.message);
              process.exit(1);
          });
          EOL

      - name: Run Puppeteer script with debugging
        run: |
          QUESTION="${{ github.event.inputs.question || 'What are the latest developments in artificial intelligence?' }}"
          echo "Running script with question: $QUESTION"
          node scripts/grok-interaction.js "$QUESTION" | tee script_output.log

      - name: Upload debug artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: debug-artifacts
          path: |
            screenshots/
            *.log
            *.txt
          retention-days: 7
